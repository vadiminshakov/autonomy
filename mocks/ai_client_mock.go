// Code generated by MockGen. DO NOT EDIT.
// Source: autonomy/core/task (interfaces: AIClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/vadiminshakov/autonomy/core/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockAIClient is a mock of AIClient interface.
type MockAIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAIClientMockRecorder
}

// MockAIClientMockRecorder is the mock recorder for MockAIClient.
type MockAIClientMockRecorder struct {
	mock *MockAIClient
}

// NewMockAIClient creates a new mock instance.
func NewMockAIClient(ctrl *gomock.Controller) *MockAIClient {
	mock := &MockAIClient{ctrl: ctrl}
	mock.recorder = &MockAIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIClient) EXPECT() *MockAIClientMockRecorder {
	return m.recorder
}

// GenerateCode mocks base method.
func (m *MockAIClient) GenerateCode(arg0 context.Context, arg1 entity.PromptData) (*entity.AIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCode", arg0, arg1)
	ret0, _ := ret[0].(*entity.AIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCode indicates an expected call of GenerateCode.
func (mr *MockAIClientMockRecorder) GenerateCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCode", reflect.TypeOf((*MockAIClient)(nil).GenerateCode), arg0, arg1)
}
